{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "title": "Action ",
    "type": "object",
    "description": "this element defines an action (operation) that can be invoked via messages using the protocol defined. In most cases this will be an http request via TCP/IP, but in desktop or LAN environments, other protocols might be used. The target property defines the endpoint and syntax for invoking the action. Result specifies the encoding format for the (possible) response(s) when the action is invoked. Object specifies the information model for the resource that is the object of the action. This approach is an adoptation of the Action Blog Post from schema.org (see https://schema.org/docs/actions.html, and https://github.com/schemaorg/suggestions-questions-brainstorming/issues/62) ",
    "properties": {
        "@type": {
            "type": "string",
            "description": "TBD, recognize other actions, e.g. SearchAction, UpdateAction..., others?",
            "default": "schema:Action",
            "const": "schema:Action"
        },
        "schema:name": {
            "type": "string",
            "description": "text label for the action"
        },
        "schema:target": {
            "$ref": "#/$defs/target_type",
            "description": "specifies the request target location and request syntax"
        },
        "schema:result": {
            "$ref": "#/$defs/result_type",
            "description": "specifies the serialization scheme (encoding format, information model) for expected representation of the data"
        },
        "schema:object": {
            "$ref": "#/$defs/object_type",
            "description": "specification of information model/schema for target resource. Only necessary if the request allow specifying the fields to include in the response"
        },
        "schema:query-input": {
            "$ref": "#/$defs/query-input_type",
            "description": "set of explanations of the parameters in the URL template for the target."
        }
    },
    "required": [
        "schema:name",
        "schema:target"
    ],
    "$defs": {
        "target_type": {
            "type": "object",
            "description": "documentation of the URL end point and syntax to invoke the service. This schema doesn't handle post requests",
            "properties": {
                "@type": {
                    "type": "string",
                    "default": "schema:EntryPoint",
                    "const": "schema:EntryPoint"
                },
                "schema:description": {"type": "string"},
                "schema:urlTemplate": {
                    "type": "string",
                    "description": "a templated URL; parameters are enclosed in curly braces ('{..}'); parameters are not required. If included, parameters MUST be documented in the query-input element. Template should be consitent with URI Template (https://datatracker.ietf.org/doc/html/rfc6570)",
                    "examples": [
                        "http://portal.chordsrt.com/api/v1/data.{encoding}; single parameter",
                        "http://portal.chordsrt.com/api/v1/data.{encoding}?instruments={instruments}&start={start}&end={end} ; multiple parameters",
                        "{endpoint}{encoding}; endpoint URL path is a parameter,should only appear in potential actions for API specification descriptions, which are generic-not specific to a particular endpoint."
                    ]
                },
                "schema:httpMethod": {
                    "title": "HTTP Method",
                    "description": "only applicable if protocol is http or a protocol that tunnels on http",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": "GET",
                        "enum": [
                            "GET",
                            "PUT",
                            "POST",
                            "PATCH",
                            "DELETE",
                            "COPY",
                            "HEAD",
                            "OPTIONS",
                            "PROPFIND"
                        ]
                    }
                },
                "schema:contentType": {
                    "type": "array",
                    "description": "The supported content type(s) for an EntryPoint response. a MIME type (https://www.iana.org/assignments/media-types/media-types.xhtml) that specifies the content type for messages in resonses from the service endpoint. This is a schema.org property, and is redundant with encodingFormat in the result property for the Action.",
                    "items": {"type": "string"}
                }
            },
            "required": ["schema:urlTemplate"]
        },
        "result_type": {
            "type": "object",
            "description": "documentation of the serialization format for the API response, i.e. an implementation of the structure specified in the object type field",
            "properties": {
                "@type": {
                    "type": "string",
                    "default": "schema:DataDownload"
                },
                "schema:encodingFormat": {
                    "type": "array",
                    "items": {"type": "string"}
                },
                "schema:description": {"type": "string"}
            }
        },
        "query-input_type": {
            "type": "array",
            "description": "object that maps the parameters (in braces '{  }' in the url template to specifications for the kind of value expected. parameters must all be strings in the URL",
            "minItems": 0,
            "items": {
                "type": "object",
                "properties": {
                    "@id": {"type": "string"},
                    "@type": {
                        "type": "string",
                        "default": "schema:PropertyValueSpecification",
                        "const": "schema:PropertyValueSpecification"
                    },
                    "schema:valueName": {"type": "string"},
                    "schema:description": {"type": "string"},
                    "schema:valueRequired": {
                        "type": "boolean",
                        "default": true
                    },
                    "schema:valuePattern": {"type": "string"}
                },
                "required": [
                    "schema:valueName",
                    "schema:description"
                ]
            }
        },
        "object_type": {
            "type": "object",
            "description": "description of the data structure of the return object",
            "properties": {
                "@type": {
                    "type": "string",
                    "default": "schema:DataFeed",
                    "const": "schema:DataFeed"
                },
                "schema:description": {"type": "string"},
                "schema:variableMeasured": {
                    "type": "array",
                    "items": {"$ref": "#/$defs/VariableMeasured"}
                }
            }
        },
        "VariableMeasured": {"$defs": "../variableMeasured/variableMeasuredSchema.json"}
    }
}